Script started on Tue 16 Oct 2018 09:21:22 PM EDT
]0;lihaoda@b2270-04:/h/u9/c7/00/lihaoda/csc209/lihaoda/Lab6b2270-04:~/csc209/lihaoda/Lab6$ gbd[K[Kdb overl[Kflor[Kw
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list 40
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
42	    }
43	
44	    return 0;
(gdb) c[Kbreak 34
Breakpoint 1 at 0x40082f: file overflow.c, line 34.
(gdb) break 36
Note: breakpoint 1 also set at pc 0x40082f.
Breakpoint 2 at 0x40082f: file overflow.c, line 36.
(gdb) run
Starting program: /h/u9/c7/00/lihaoda/csc209/lihaoda/Lab6/overflow 
Address of the variables:
7fffffffe710 -> &after[0]
7fffffffe714 -> &after[1]
7fffffffe718 -> &after[2]
7fffffffe71c -> &after[3]
7fffffffe700 -> &a[0]
7fffffffe704 -> &a[1]
7fffffffe708 -> &a[2]
7fffffffe70c -> &a[3]
7fffffffe6f0 -> &before[0]
7fffffffe6f4 -> &before[1]
7fffffffe6f8 -> &before[2]
7fffffffe6fc -> &before[3]
7fffffffe6ec -> &i
7fffffffe6e8 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) contino[Kue
Continuing.
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}
i = 1
before = {10, 10, 10, 10}
a = {0, 10, 0, 0}
after = {10, 10, 10, 10}
i = 2
before = {10, 10, 10, 10}
a = {0, 10, 20, 0}
after = {10, 10, 10, 10}
i = 3
before = {10, 10, 10, 10}
a = {0, 10, 20, 30}
after = {10, 10, 10, 10}
i = 4
before = {10, 10, 10, 10}
a = {0, 10, 20, 30}
after = {40, 10, 10, 10}
[Inferior 1 (process 57656) exited normally]
(gdb) coun[K[Kntinue
The program is not being run.
(gdb) run
Starting program: /h/u9/c7/00/lihaoda/csc209/lihaoda/Lab6/overflow 
Address of the variables:
7fffffffe710 -> &after[0]
7fffffffe714 -> &after[1]
7fffffffe718 -> &after[2]
7fffffffe71c -> &after[3]
7fffffffe700 -> &a[0]
7fffffffe704 -> &a[1]
7fffffffe708 -> &a[2]
7fffffffe70c -> &a[3]
7fffffffe6f0 -> &before[0]
7fffffffe6f4 -> &before[1]
7fffffffe6f8 -> &before[2]
7fffffffe6fc -> &before[3]
7fffffffe6ec -> &i
7fffffffe6e8 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) next
37	        a[i] = i * 10;
(gdb) next
38	        printf("i = %d\n", i);
(gdb) next[K[K[K[Kdio[K[Kisplay array[K[K[K[Kfter
1: after = {10, 10, 10, 10}
(gdb) display after[C[C[C[C[C[Cnext[K
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {40, 10, 10, 10}
(gdb) print &()a)f)t)e)r)[)])0])
$1 = (int *) 0x7fffffffe710
(gdb) print &()a)[)])4])
$2 = (int *) 0x7fffffffe710
(gdb) quit
A debugging session is active.

	Inferior 1 [process 57677] will be killed.

Quit anyway? (y or n) y
]0;lihaoda@b2270-04:/h/u9/c7/00/lihaoda/csc209/lihaoda/Lab6b2270-04:~/csc209/lihaoda/Lab6$ exit
exit

Script done on Tue 16 Oct 2018 09:23:52 PM EDT
